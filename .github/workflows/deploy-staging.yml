name: Deploy to Staging

on:
  push:
    branches: [ main ]
  workflow_dispatch:

jobs:
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: Run unit tests
      run: |
        python3 -m pytest tests/test_crud.py -v --tb=short
      continue-on-error: false

    - name: Run integration tests
      run: |
        python3 -m pytest tests/test_api.py -v --tb=short
      continue-on-error: false
    
    - name: Test summary
      if: success()
      run: |
        echo "✅ All tests passed! Ready for deployment."

  build-frontend:
    name: Build Frontend
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '18'
    
    - name: Build frontend
      working-directory: ./frontend
      run: |
        npm ci
        npm run build
    
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: frontend-build
        path: frontend/build/
        retention-days: 1

  deploy:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [test, build-frontend]
    environment: staging
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Download frontend build
      uses: actions/download-artifact@v4
      with:
        name: frontend-build
        path: frontend/build/
    
    - name: Setup SSH key
      run: |
        mkdir -p ~/.ssh
        echo "${{ secrets.STAGING_SSH_KEY }}" > ~/.ssh/staging_key.pem
        chmod 600 ~/.ssh/staging_key.pem
        ssh-keyscan -H ${{ secrets.STAGING_HOST }} >> ~/.ssh/known_hosts
    
    - name: Deploy to staging environment
      run: |
        # Deploy to staging directory (separate from dev)
        ssh -i ~/.ssh/staging_key.pem ${{ secrets.STAGING_USER }}@${{ secrets.STAGING_HOST }} \
          "mkdir -p /home/azureuser/staging"
        
        # Sync application files
        rsync -avz --delete \
          --exclude '.git/' \
          --exclude '.github/' \
          --exclude 'node_modules/' \
          --exclude '__pycache__/' \
          --exclude '*.pyc' \
          --exclude '.bridge_session' \
          --exclude 'exec_*/' \
          -e "ssh -i ~/.ssh/staging_key.pem" \
          ./ ${{ secrets.STAGING_USER }}@${{ secrets.STAGING_HOST }}:/home/azureuser/staging/
    
    - name: Restart staging server
      run: |
        ssh -i ~/.ssh/staging_key.pem ${{ secrets.STAGING_USER }}@${{ secrets.STAGING_HOST }} << 'EOF'
          cd /home/azureuser/staging
          
          # Stop old server
          pkill -f "python3 main.py" || true
          sleep 2
          
          # Start new server
          nohup python3 main.py > server.log 2>&1 &
          sleep 3
          
          # Health check
          curl -f http://localhost:8000/api/health || exit 1
          
          echo "✅ Staging deployment complete!"
        EOF
    
    - name: Deployment summary
      run: |
        echo "## Deployment Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "**Environment**: Staging" >> $GITHUB_STEP_SUMMARY
        echo "**Commit**: ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
        echo "**Status**: ✅ Deployed successfully" >> $GITHUB_STEP_SUMMARY
        echo "**URL**: http://${{ secrets.STAGING_HOST }}:8000" >> $GITHUB_STEP_SUMMARY


